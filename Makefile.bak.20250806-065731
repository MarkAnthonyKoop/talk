.ONESHELL:
# Makefile for the talk project
#   make dev               # venv -> single editable install [all,dev] -> link only `talk` -> verify
#   make install           # editable install of core package
#   make install-all       # editable install with [all] extras
#   make install-dev       # editable install with [dev] extras
#   make link-talk         # symlink ~/.local/bin/talk -> $(VENV_DIR)/bin/talk
#   make talk-help         # run `talk -h` via venv
#   make run-talk ARGS="--version"
#   make test / lint / format / typecheck
#   make build             # sdist+wheel
#   make doctor            # show entry-point + interpreter info
#   make clean / distclean # remove caches/build artifacts

SHELL := /usr/bin/env bash

PROJECT_ROOT := $(CURDIR)
VENV_DIR     := $(HOME)/venvs/talk311
USER_BIN     := $(HOME)/.local/bin
PYTHON       := $(VENV_DIR)/bin/python
PIP          := $(VENV_DIR)/bin/pip
TALK_BIN     := $(VENV_DIR)/bin/talk

.DEFAULT_GOAL := dev

.PHONY: dev venv upgrade-tools install install-all install-dev link-talk reinstall talk-help run-talk build test lint format typecheck doctor entrypoint-info clean distclean print-python

# Single-pass install of [all,dev], then link & verify
dev: venv upgrade-tools
	@$(PIP) install -e '$(PROJECT_ROOT)[all,dev]'
	@$(MAKE) link-talk
	@$(MAKE) doctor
	@echo "? Dev environment ready."

venv:
	@mkdir -p "$(USER_BIN)" "$$(dirname "$(VENV_DIR)")"
	@if [ ! -x "$(VENV_DIR)/bin/python" ]; then \
		echo "Creating venv at $(VENV_DIR)"; \
		if command -v python3.11 >/dev/null 2>&1; then \
			python3.11 -m venv "$(VENV_DIR)"; \
		else \
			echo "python3.11 not found; trying python3"; \
			python3 -m venv "$(VENV_DIR)"; \
		fi \
	else \
		echo "Using existing venv at $(VENV_DIR)"; \
	fi

upgrade-tools: venv
	@$(PIP) install -U pip setuptools wheel build >/dev/null
	@echo "Build tooling upgraded."

install: venv
	@echo "Editable install from $(PROJECT_ROOT)"
	@$(PIP) install -e "$(PROJECT_ROOT)"

install-all: venv
	@echo "Editable install with [all] extras"
	@$(PIP) install -e '$(PROJECT_ROOT)[all]'

install-dev: venv
	@echo "Editable install with [dev] extras"
	@$(PIP) install -e '$(PROJECT_ROOT)[dev]'

reinstall: venv
	@echo "Reinstalling package"
	@$(PIP) uninstall -y talk >/dev/null 2>&1 || true
	@$(PIP) install -e "$(PROJECT_ROOT)"

link-talk: venv
	@if [ ! -x "$(TALK_BIN)" ]; then \
		echo "Error: $(TALK_BIN) not found. Run 'make install' (or 'make dev') first." >&2; exit 1; \
	fi
	@ln -sfn "$(TALK_BIN)" "$(USER_BIN)/talk"
	@hash -d talk 2>/dev/null || true
	@echo "talk -> $(TALK_BIN)"
	@which talk

talk-help: venv
	@$(TALK_BIN) -h || true

run-talk: venv
	@$(TALK_BIN) $(ARGS)

build: venv
	@$(PYTHON) -m build

test: venv
	@$(VENV_DIR)/bin/pytest -q || (echo "Note: pytest not installed. Try: make install-dev" && exit 1)

lint: venv
	@$(VENV_DIR)/bin/ruff check .

format: venv
	@$(VENV_DIR)/bin/black .

typecheck: venv
	@$(VENV_DIR)/bin/mypy talk || (echo "Note: mypy not installed. Try: make install-dev" && exit 1)

doctor: venv entrypoint-info
	@echo "which talk => $$(command -v talk)"
	@if command -v readlink >/dev/null 2>&1; then \
		echo "resolves to  => $$(readlink -f '$(USER_BIN)/talk' 2>/dev/null || echo n/a)"; \
	fi
	@echo "talk -h exit code: $$($(TALK_BIN) -h >/dev/null 2>&1; echo $$?)"

entrypoint-info: venv
	@$(PYTHON) - <<-'PY'
	import importlib, importlib.metadata as md, sys, platform
	print(f"Python: {platform.python_implementation()} {platform.python_version()} ({sys.executable})")
	try:
	    ep = next(e for e in md.entry_points(group="console_scripts") if e.name=="talk")
	    print("Entry point:", ep)
	    mod_name, _, _ = ep.value.partition(":")
	    m = importlib.import_module(mod_name)
	    print("Module file:", getattr(m, "__file__", None))
	except StopIteration:
	    print("No console_scripts entry named 'talk' found.")
	PY

print-python: venv
	@$(PYTHON) -c 'import sys; print(sys.executable)'

clean:
	@find . -name '__pycache__' -type d -exec rm -rf {} + 2>/dev/null || true
	@rm -rf .pytest_cache .ruff_cache .mypy_cache .coverage coverage.xml htmlcov 2>/dev/null || true
	@echo "Cleaned caches."

distclean: clean
	@rm -rf build dist *.egg-info 2>/dev/null || true
	@echo "Removed build artifacts."
